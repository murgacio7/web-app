env:
  repo:         "https://github.com/murgacio7/simple-website.git"
  project_id:   "terraform-project-main-project"
  repo_region:  "us-central1"
  app_name:     "simple-website"
  registry_name: "docker-registry"



name: ContinuousDelivery
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App version'
        required: true
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a set of commands using the runners shell
      - name: Clone a repo
        run: |
          git clone https://github.com/akhasa2001/simple-website.git

      # Runs a set of commands using the runners shell
      - name: Switch Branches
        working-directory: ${{ env.app_name }}
        run: |
          git checkout ${{ github.event.inputs.app_version }}



      # Runs a set of commands using the runners shell
      - name: Build Image
        working-directory: ${{ env.app_name }}
        run: |
          docker build -t ${{ env.app_name }}:${{ github.event.inputs.app_version }}   . 


      # Runs a set of commands using the runners shell
      - name: Tag Image
        working-directory: ${{ env.app_name }}
        run: |
          docker image tag ${{ env.app_name }}:${{ github.event.inputs.app_version }} ${{ env.repo_region }}-docker.pkg.dev/${{ env.project_id }}/${{ env.registry_name }}/${{ env.app_name }}:${{ github.event.inputs.app_version }}    


      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: gcloud version 

      # # Here, we'll create the service account JSON file from the secret
      # - name: Create service account JSON file
      #   run: echo "${{ secrets.SERVICE_ACCOUNT_KEY }}" | jq '.' > service-account.json

      - name: create service-account.json file
        run: |
          # Decode base64 encoded service account key
          echo "${{ secrets.SERVICE_ACCOUNT_KEY }}" | base64 -d > service-account.json


      - name: Authenticate to Google account
        run: |
          gcloud auth activate-service-account --key-file="service-account.json"
          gcloud config set project ${{ env.project_id }}



      - name: Authenticate to repository
        run: |
          gcloud auth configure-docker  ${{ env.repo_region }}-docker.pkg.dev

          


      # Runs a set of commands using the runners shell
      - name: Image push
        working-directory: ${{ env.app_name }}
        run: |
          docker push ${{ env.repo_region }}-docker.pkg.dev/${{ env.project_id }}/${{ env.registry_name }}/${{ env.app_name }}:${{ github.event.inputs.app_version }}

